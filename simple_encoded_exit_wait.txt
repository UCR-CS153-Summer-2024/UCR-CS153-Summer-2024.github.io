#include "types.h"
#include "stat.h"
#include "user.h"

void test_simple_exit_wait(int status) {
    int pid = fork();
    if (pid < 0) {
        printf(1, "Fork failed!\n");
        exit(-1);
    }
    if (pid == 0) {
        exit(status);
    } else {
        int wait_status;
        int wait_pid = wait(&wait_status);
        if (wait_pid == -1) {
            printf(1, "Wait failed!\n");
        } else {
            if (wait_status == status) {
                printf(1, "%d\n", wait_status);
            }
        }
    }
}

void test_more_exit_wait(int ch1_status, int ch2_status) {
    int ch1_pid = fork();
    if (ch1_pid < 0) {
        printf(1, "Fork failed!\n");
        exit(-1);
    }
    if (ch1_pid == 0) {
        int ch2_pid = fork();
        if (ch2_pid < 0) {
            printf(1, "Fork failed!\n");
            exit(-1);
        }
        if (ch2_pid == 0) {
            // sleep(100);
            exit(ch2_status);
        } else {
            int ch2_wait_status;
            int ch2_wait_pid = wait(&ch2_wait_status);
            if (ch2_wait_pid == -1) {
                printf(1, "Wait failed!\n");
            } else {
                if (ch2_wait_status == ch2_status) {
                    printf(1, "%d\n", ch2_wait_status);
                }
            }
        } 
        exit(ch1_status);
    } else {
        int ch1_wait_status;
        int ch1_wait_pid = wait(&ch1_wait_status);
        if (ch1_wait_pid == -1) {
            printf(1, "Wait failed!\n");
        } else {
            if (ch1_wait_status == ch1_status) {
                printf(1, "%d\n", ch1_wait_status);
            }
        }
    }
}

void first_test() {
    // Test cases with different exit statuses
    test_simple_exit_wait(1);   // Exit with status 1
    test_simple_exit_wait(42);  // Exit with status 42
    test_simple_exit_wait(-1);  // Exit with status -1
    test_simple_exit_wait(0);   // Normal exit

    exit(0);
}

void second_test() {
   test_more_exit_wait(1, -1); 
   test_more_exit_wait(0, 1); 
   test_more_exit_wait(0, 0);   // Both exit normally

   exit(0);
}

int main(int argc, char* argv[]) {
    if (atoi(argv[1]) == 1) {
        first_test();  
    } else if (atoi(argv[1]) == 2) {
        second_test();
    } else {
        printf(1, "The argument is not correct!\n");
        return -1;
    }
    
    return 0;
}